#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# sublime2yas.rb --- convert Sublime Text Snippets to YASnippet 
#
# generate YASnippets from Sublime Text Snippets.
# Use sublime2yas --help to get usage information.
#
# Copyright ©2013 Jason Milkins
# based on original work Copyright ©2009 Rob Christie, ©2010 João Távora
# which was in turn based on a python script by Jeff Wheeler: http://nokrev.com
# http://code.nokrev.com/?p=snippet-copier.git;a=blob_plain;f=snippet_copier.py
#
require 'sublime2yas'
require 'trollop'
require 'fileutils'

Encoding.default_external = Encoding::UTF_8 if RUBY_VERSION > '1.8.7'

snippet_doc = []

opts = Trollop::options do
  opt :snippet_dir,   %q(Sublime-snippet directory),

      :short => '-d', :type => :string

  opt :output_dir,    %(Output directory, use the major-mode name you are targeting as the containing folder's name, e.g. snippets/major-mode),

      :short => '-o', :type => :string

  opt :major_mode,    %(Explicit setting of major-mode if the folder name is different),

      :short => '-m', :type => :string

  opt :parent_modes,  %q(List of Yasnippet parent modes as a quoted string eg. "cc-mode,text-mode"),

      :short => '-p', :type => :string

  opt :glob,          %q(Specific snippet file (or glob) inside <snippet_dir>, default is *.sublime-snippet),

      :short => '-g', :default => '*.sublime-snippet'

  opt :snippet_group, %q(Yasnippet group: to use in generated snippets, eg. -G rails to add 'group: rails' to each snippet. They will appear in submenu's on the major-mode Yasnippet menu),

      :short => '-G', :type => :string

  opt :quiet,         %(quiet output),

      :short => '-q'

  opt :doc,          %(generate a quick reference in markdown format, listing the shortcut and description. Stored in the --output-dir as QUICKREF.md)

end

Trollop::die :snippet_dir, "'must be provided" unless opts.snippet_dir
Trollop::die :snippet_dir, "must exist" unless File.directory? opts.snippet_dir

Trollop::die :output_dir, "must be provided" unless opts.output_dir
Trollop::die :output_dir, "must exist" unless File.directory? opts.output_dir

if __FILE__ == $PROGRAM_NAME
 
  modename = if opts.major_mode
               opts.major_mode
             else
               File.basename opts.output_dir
             end
  
  original_dir = Dir.pwd

  if opts.parent_modes
    yas_parents_file = File.join(opts.output_dir, ".yas-parents")
    File.open yas_parents_file, 'w' do |yp|
      yp.puts opts.parent_modes
    end
  end

  yas_setup_el_file = File.join(original_dir, opts.output_dir, ".yas-setup.el")
  separator = ";; --**--"
  whole, head, tail = "", "", ""

  if File::exists? yas_setup_el_file
    File.open yas_setup_el_file, '"r' do |file|
      whole = file.read
      head, tail = whole.split(separator)
    end
  else
    head = ";; .yas-setup.el for #{modename}\n" + ";; \n"
  end

  tail    ||= ""
  head    ||= ""
  directive = nil
  head.each_line do |line|
    case line
    when /^;; Substitutions for:(.*)$/
      directive = $~[1].strip
    when /^;;(.*)[ ]+=yyas>(.*)$/
      replacewith = $~[2].strip
      lookfor = $~[1]
      lookfor.gsub!(/^[ ]*/, "")
      lookfor.gsub!(/[ ]*$/, "")
      unless !directive or replacewith =~ /yas-unknown/ then
        Sublime2yas::SublimeSnippet.extra_substitutions[directive][lookfor] = replacewith
      end
    end
  end

  Dir.chdir opts.snippet_dir
  snippet_files_glob = File.join("**", opts.glob)
  snippet_files = Dir.glob(snippet_files_glob)
  puts "Attempting to convert #{snippet_files.length} snippets...\n" unless opts.quiet
  snippet_files.each do |file|
    begin
      $stdout.print "Processing \"#{File.join(opts.snippet_dir,file)}\"..." unless opts.quiet
      snippet = Sublime2yas::SublimeSnippet.new(file)
      file_to_create = File.join(original_dir, opts.output_dir, snippet.yas_file)
      FileUtils.mkdir_p(File.dirname(file_to_create))
      File.open(file_to_create, 'w') do |f|
        f.write(snippet.to_yas opts)
      end

      snippet_doc << {keys: snippet.key, name: snippet.name} if opts.doc

      $stdout.print "done\n" unless opts.quiet
    rescue Sublime2yas::SkipSnippet => e
      $stdout.print "skipped! #{e.message}\n" unless opts.quiet
    rescue RuntimeError => e
      $stderr.print "failed! #{e.message}\n"
      $strerr.print "#{e.backtrace.join("\n")}" unless opts.quiet
    end
  end

  # TODO: Perhaps do this as a slim template so we can use tables, flex-boxes and what-not.
  if opts.doc
    doc_file = File.join opts.output_dir, "QUICKREF.md"
    File.open(doc_file, "w") do |f|
      f.puts "# #{modename.capitalize} - Snippets Quick Reference"
      snippet_doc.each do |doc|
        f.puts "\n`#{doc[:keys]}` ➔ "
        f.puts "\n>#### `#{doc[:name]}`"
      end
      f.puts "\n\n<sub>Generated by Sublime Snippet Import to Yasnippet, <sup>Powered by tea, figs and ruby</sup></sub>"
    end
    puts "#{modename.capitalize} - Snippets Quick Reference created."
  end

end
